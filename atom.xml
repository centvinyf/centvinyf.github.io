<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>帆的小窝</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://since1992.org/"/>
  <updated>2016-06-18T14:16:47.000Z</updated>
  <id>http://since1992.org/</id>
  
  <author>
    <name>Fan Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode-118-Pascal&#39;s Triangle</title>
    <link href="http://since1992.org/2016/06/18/Leetcode-118-Pascal-s-Triangle/"/>
    <id>http://since1992.org/2016/06/18/Leetcode-118-Pascal-s-Triangle/</id>
    <published>2016-06-18T14:14:33.000Z</published>
    <updated>2016-06-18T14:16:47.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given numRows, generate the first numRows of Pascal’s triangle.&lt;/p&gt;
&lt;p&gt;For example, given numRows = 5,&lt;br&gt;Return&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;给定一个数字N，生成前N行帕斯卡三角。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;至于什么是帕斯卡三角，可以参加&lt;a href=&quot;https://en.wikipedia.org/wiki/Pascal%27s_triangle&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;维基百科&lt;/a&gt;,找出规律以后写代码就容易了。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
public:
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; generate(int numRows) {
        vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; ans;
        if(numRows&amp;lt;=0) return ans;
        ans.resize(numRows);
        for(int i=0;i&amp;lt;numRows;i++)
        {
            ans[i].resize(i+1,1);
            for(int j=1;j&amp;lt;i;j++)
            ans[i][j]=ans[i-1][j]+ans[i-1][j-1];
        }
        return ans;
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given numRows, generate the first numRows of Pascal’s triangle.&lt;/p&gt;
&lt;p&gt;For example, given numRows = 5,&lt;br&gt;Return&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[
     [1],
    [1,1],
   [1,2,1],
  [1,3,3,1],
 [1,4,6,4,1]
]
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Easy" scheme="http://since1992.org/tags/Easy/"/>
    
      <category term="Array" scheme="http://since1992.org/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-232-Implement Queue using Stacks</title>
    <link href="http://since1992.org/2016/06/18/Leetcode-232-Implement-Queue-using-Stacks/"/>
    <id>http://since1992.org/2016/06/18/Leetcode-232-Implement-Queue-using-Stacks/</id>
    <published>2016-06-18T13:45:20.000Z</published>
    <updated>2016-06-18T13:47:00.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Implement the following operations of a queue using stacks.&lt;/p&gt;
&lt;p&gt;push(x) – Push element x to the back of queue.&lt;br&gt;pop() – Removes the element from in front of queue.&lt;br&gt;peek() – Get the front element.&lt;br&gt;empty() – Return whether the queue is empty.&lt;br&gt;Notes:&lt;br&gt;You must use only standard operations of a stack – which means only push to top, peek/pop from top, size, and is empty operations are valid.&lt;br&gt;Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.&lt;br&gt;You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;用栈实现队列的操作。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;很简单，用两个栈即可取到任意一端的元素。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Queue {
    stack&amp;lt;int&amp;gt; s1;
    stack&amp;lt;int&amp;gt; s2;
public:
    // Push element x to the back of queue.
    void push(int x) {
        s1.push(x);
    }

    // Removes the element from in front of queue.
    void pop(void) {
        while(!s1.empty())
        {
            s2.push(s1.top());
            s1.pop();
        }
        s2.pop();
        while(!s2.empty())
        {
            s1.push(s2.top());
            s2.pop();
        }

    }

    // Get the front element.
    int peek(void) {
        while(!s1.empty())
        {
            s2.push(s1.top());
            s1.pop();
        }
        int p = s2.top();
        while(!s2.empty())
        {
            s1.push(s2.top());
            s2.pop();
        }
        return p;
    }

    // Return whether the queue is empty.
    bool empty(void) {
        return s1.empty();

    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Implement the following operations of a queue using stacks.&lt;/p&gt;
&lt;p&gt;push(x) – Push element x to the back of queue.&lt;br&gt;pop() – Removes the element from in front of queue.&lt;br&gt;peek() – Get the front element.&lt;br&gt;empty() – Return whether the queue is empty.&lt;br&gt;Notes:&lt;br&gt;You must use only standard operations of a stack – which means only push to top, peek/pop from top, size, and is empty operations are valid.&lt;br&gt;Depending on your language, stack may not be supported natively. You may simulate a stack by using a list or deque (double-ended queue), as long as you use only standard operations of a stack.&lt;br&gt;You may assume that all operations are valid (for example, no pop or peek operations will be called on an empty queue).&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Easy" scheme="http://since1992.org/tags/Easy/"/>
    
      <category term="Stack" scheme="http://since1992.org/tags/Stack/"/>
    
      <category term="Design" scheme="http://since1992.org/tags/Design/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-66-Plus One</title>
    <link href="http://since1992.org/2016/06/18/Leetcode-66-Plus-One/"/>
    <id>http://since1992.org/2016/06/18/Leetcode-66-Plus-One/</id>
    <published>2016-06-18T13:36:38.000Z</published>
    <updated>2016-06-18T13:37:39.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a non-negative number represented as an array of digits, plus one to the number.&lt;/p&gt;
&lt;p&gt;The digits are stored such that the most significant digit is at the head of the list.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;给一个数组表示一个数字，返回它加一的结果。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;很简单的一道题，注意进位的处理，以及全9的情况即可。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
public:
    vector&amp;lt;int&amp;gt; plusOne(vector&amp;lt;int&amp;gt;&amp;amp; digits) {
        int i = digits.size()-1;
        while(i&amp;gt;=0)
        {
            if(digits[i]&amp;lt;9){
                digits[i]++;
                return digits;
            }
            digits[i--]=0;

        }
        digits.insert(digits.begin(),1);
        return digits;

    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a non-negative number represented as an array of digits, plus one to the number.&lt;/p&gt;
&lt;p&gt;The digits are stored such that the most significant digit is at the head of the list.&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Easy" scheme="http://since1992.org/tags/Easy/"/>
    
      <category term="Array" scheme="http://since1992.org/tags/Array/"/>
    
      <category term="Math" scheme="http://since1992.org/tags/Math/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-342-Power of Four</title>
    <link href="http://since1992.org/2016/06/18/Leetcode-342-Power-of-Four/"/>
    <id>http://since1992.org/2016/06/18/Leetcode-342-Power-of-Four/</id>
    <published>2016-06-18T11:18:22.000Z</published>
    <updated>2016-06-18T12:33:17.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given an integer (signed 32 bits), write a function to check whether it is a power of 4.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given num = 16, return true. Given num = 5, return false.&lt;/p&gt;
&lt;p&gt;Follow up: Could you solve it without loops/recursion?&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;给定一个32位的整数，判断它是否是4的幂。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;本体与&lt;a href=&quot;/2016/06/07/Leetcode-231-Power-of-Two/&quot;&gt;求2的幂&lt;/a&gt;和&lt;a href=&quot;/2016/06/07/Leetcode-326-Power-of-Tree/&quot;&gt;求3的幂&lt;/a&gt;类似，解法可参加这两题。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
public:
    bool isPowerOfFour(int num) {
        while(num&amp;gt;1&amp;amp;&amp;amp;num%4==0)
        {
            num/=4;
        }
        return num==1;
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given an integer (signed 32 bits), write a function to check whether it is a power of 4.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given num = 16, return true. Given num = 5, return false.&lt;/p&gt;
&lt;p&gt;Follow up: Could you solve it without loops/recursion?&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Easy" scheme="http://since1992.org/tags/Easy/"/>
    
      <category term="Matt" scheme="http://since1992.org/tags/Matt/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-107-Binary Tree Level Order Traversal II</title>
    <link href="http://since1992.org/2016/06/18/Leetcode-107-Binary-Tree-Level-Order-Traversal-II/"/>
    <id>http://since1992.org/2016/06/18/Leetcode-107-Binary-Tree-Level-Order-Traversal-II/</id>
    <published>2016-06-18T10:26:12.000Z</published>
    <updated>2016-06-18T10:28:05.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).&lt;/p&gt;
&lt;p&gt;For example:&lt;br&gt;Given binary tree [3,9,20,null,null,15,7],&lt;br&gt;        3&lt;br&gt;       / \&lt;br&gt;      9  20&lt;br&gt;        /  \&lt;br&gt;       15   7&lt;br&gt;return its bottom-up level order traversal as:&lt;br&gt;    [&lt;br&gt;      [15,7],&lt;br&gt;      [9,20],&lt;br&gt;      [3]&lt;br&gt;    ]&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;给定一棵二叉树，返回从底至顶的层次遍历结果。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;利用一个辅助队列完成BFS.再反向存储数组即可。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;p&gt;/**&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Definition for a binary tree node.&lt;/li&gt;
&lt;li&gt;struct TreeNode {&lt;/li&gt;
&lt;li&gt;int val;&lt;/li&gt;
&lt;li&gt;TreeNode *left;&lt;/li&gt;
&lt;li&gt;TreeNode *right;&lt;/li&gt;
&lt;li&gt;TreeNode(int x) : val(x), left(NULL), right(NULL) {}&lt;/li&gt;
&lt;li&gt;};&lt;br&gt;*/&lt;br&gt;class Solution {&lt;br&gt; public:&lt;pre&gt;&lt;code&gt;vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; levelOrderBottom(TreeNode* root) {
    vector&amp;lt;int&amp;gt; tem;
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; ans;
    queue &amp;lt;TreeNode*&amp;gt; q;
    if(!root) return ans;
    q.push(root);
    q.push(NULL);
    while(!q.empty())
    {
        TreeNode * t = q.front();
        q.pop();
        if(t){
            tem.push_back(t-&amp;gt;val);
            if(t-&amp;gt;left)
            q.push(t-&amp;gt;left);
            if(t-&amp;gt;right)
            q.push(t-&amp;gt;right);
        }else
        {
            if(!q.empty()){
            ans.push_back(tem);
            tem.clear();
            q.push(NULL);}
            else
            ans.push_back(tem);
        }
    }
    vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt; res;
    for(int i=ans.size()-1;i&amp;gt;=0;i--)
    res.push_back(ans[i]);
    return res;
}
&lt;/code&gt;&lt;/pre&gt; };&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a binary tree, return the bottom-up level order traversal of its nodes’ values. (ie, from left to right, level by level from leaf to root).&lt;/p&gt;
&lt;p&gt;For example:&lt;br&gt;Given binary tree [3,9,20,null,null,15,7],&lt;br&gt;        3&lt;br&gt;       / \&lt;br&gt;      9  20&lt;br&gt;        /  \&lt;br&gt;       15   7&lt;br&gt;return its bottom-up level order traversal as:&lt;br&gt;    [&lt;br&gt;      [15,7],&lt;br&gt;      [9,20],&lt;br&gt;      [3]&lt;br&gt;    ]&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Easy" scheme="http://since1992.org/tags/Easy/"/>
    
      <category term="Tree" scheme="http://since1992.org/tags/Tree/"/>
    
      <category term="BFS" scheme="http://since1992.org/tags/BFS/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-101-Symmetric Tree</title>
    <link href="http://since1992.org/2016/06/16/Leetcode-101-Symmetric-Tree/"/>
    <id>http://since1992.org/2016/06/16/Leetcode-101-Symmetric-Tree/</id>
    <published>2016-06-16T04:16:10.000Z</published>
    <updated>2016-06-18T10:28:08.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).&lt;/p&gt;
&lt;p&gt;For example, this binary tree [1,2,2,3,4,4,3] is symmetric:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    1
   / \
  2   2
 / \ / \
3  4 4  3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But the following [1,2,2,null,3,null,3] is not:&lt;br&gt;        1&lt;br&gt;       / \&lt;br&gt;      2   2&lt;br&gt;       \   \&lt;br&gt;       3    3&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;给定一棵树，检查它是否是中心对称的。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;很简单，运用一个辅助函数检查两棵树是否对称即可。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSymmetric(TreeNode* root) {
        if(!root) return true;
        return isM(root-&amp;gt;left,root-&amp;gt;right);

    }
    bool isM(TreeNode* a,TreeNode* b)
    {
        if(!a&amp;amp;&amp;amp;!b) return true;
        if((a&amp;amp;&amp;amp;!b)||(b&amp;amp;&amp;amp;!a)) return false;
        if(a-&amp;gt;val!=b-&amp;gt;val) return false;
        return isM(a-&amp;gt;left,b-&amp;gt;right)&amp;amp;&amp;amp;isM(a-&amp;gt;right,b-&amp;gt;left);
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a binary tree, check whether it is a mirror of itself (ie, symmetric around its center).&lt;/p&gt;
&lt;p&gt;For example, this binary tree [1,2,2,3,4,4,3] is symmetric:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    1
   / \
  2   2
 / \ / \
3  4 4  3
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;But the following [1,2,2,null,3,null,3] is not:&lt;br&gt;        1&lt;br&gt;       / \&lt;br&gt;      2   2&lt;br&gt;       \   \&lt;br&gt;       3    3&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Easy" scheme="http://since1992.org/tags/Easy/"/>
    
      <category term="Tree" scheme="http://since1992.org/tags/Tree/"/>
    
      <category term="DFS" scheme="http://since1992.org/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-27-Remove Element</title>
    <link href="http://since1992.org/2016/06/16/Leetcode-27-Remove-Element/"/>
    <id>http://since1992.org/2016/06/16/Leetcode-27-Remove-Element/</id>
    <published>2016-06-16T03:59:47.000Z</published>
    <updated>2016-06-16T04:07:13.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given an array and a value, remove all instances of that value in place and return the new length.&lt;/p&gt;
&lt;p&gt;Do not allocate extra space for another array, you must do this in place with constant memory.&lt;/p&gt;
&lt;p&gt;The order of elements can be changed. It doesn’t matter what you leave beyond the new length.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given input array nums = [3,2,2,3], val = 3&lt;/p&gt;
&lt;p&gt;Your function should return length = 2, with the first two elements of nums being 2.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;给定一个数组和一个特定的值，移除数组中所有该值，并返回剩余值的个数。你只能只用O(1)的额外空间，数字的顺序可以改变。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;本题和&lt;a href=&quot;2016/05/23/Leetcode-283-Move-Zeroes/&quot;&gt;这道题&lt;/a&gt;很类似，只是删除特定的值而已。我们的策略就是把所有的特定值都移动到数组的末尾。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
public:
    int removeElement(vector&amp;lt;int&amp;gt;&amp;amp; nums, int val) {
        int p=0;
        for(int i=0;i&amp;lt;nums.size();i++)
        {
            if(nums[i]!=val)
                swap(nums[i],nums[p++]);
        }
        return p;

    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given an array and a value, remove all instances of that value in place and return the new length.&lt;/p&gt;
&lt;p&gt;Do not allocate extra space for another array, you must do this in place with constant memory.&lt;/p&gt;
&lt;p&gt;The order of elements can be changed. It doesn’t matter what you leave beyond the new length.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given input array nums = [3,2,2,3], val = 3&lt;/p&gt;
&lt;p&gt;Your function should return length = 2, with the first two elements of nums being 2.&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Easy" scheme="http://since1992.org/tags/Easy/"/>
    
      <category term="Array" scheme="http://since1992.org/tags/Array/"/>
    
      <category term="Two Pointers" scheme="http://since1992.org/tags/Two-Pointers/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-110-Balanced Binary Tree</title>
    <link href="http://since1992.org/2016/06/12/Leetcode-110-Balanced-Binary-Tree/"/>
    <id>http://since1992.org/2016/06/12/Leetcode-110-Balanced-Binary-Tree/</id>
    <published>2016-06-12T03:11:11.000Z</published>
    <updated>2016-06-12T03:13:20.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a binary tree, determine if it is height-balanced.&lt;/p&gt;
&lt;p&gt;For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;给定一棵二叉树，判断它是否平衡。一个平衡的二叉树的左右子树的深度差小于或等于1.&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;很简单的DFS问题，先判断左右子树是否为平衡二叉树，再判断它们的高度差是否在1以内。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isBalanced(TreeNode* root) {
        if(!root) return true;
        if(isBalanced(root-&amp;gt;left)&amp;amp;&amp;amp;isBalanced(root-&amp;gt;right))
            if(abs(height(root-&amp;gt;left)-height(root-&amp;gt;right))&amp;lt;2)
                return true;
        return false;

    }
    int height(TreeNode* root)
    {
        if(!root) return 0;
        return 1+max(height(root-&amp;gt;left),height(root-&amp;gt;right));
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a binary tree, determine if it is height-balanced.&lt;/p&gt;
&lt;p&gt;For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Easy" scheme="http://since1992.org/tags/Easy/"/>
    
      <category term="Tree" scheme="http://since1992.org/tags/Tree/"/>
    
      <category term="DFS" scheme="http://since1992.org/tags/DFS/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-24-Swap Nodes in Pairs</title>
    <link href="http://since1992.org/2016/06/12/Leetcode-24-Swap-Nodes-in-Pairs/"/>
    <id>http://since1992.org/2016/06/12/Leetcode-24-Swap-Nodes-in-Pairs/</id>
    <published>2016-06-12T02:57:01.000Z</published>
    <updated>2016-06-12T02:58:29.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a linked list, swap every two adjacent nodes and return its head.&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;Given 1-&amp;gt;2-&amp;gt;3-&amp;gt;4, you should return the list as 2-&amp;gt;1-&amp;gt;4-&amp;gt;3.&lt;/p&gt;
&lt;p&gt;Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;交换每一对链表的顺序。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;用一个递归的办法可以简单的完成这个问题，注意边界。 当然用非递归的办法也可以，不过写法并不够简洁，本文仅提供递归的解法。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* swapPairs(ListNode* head) {
        if(!head||!head-&amp;gt;next) return head;
        ListNode * nextp = head-&amp;gt;next-&amp;gt;next;
        ListNode * tem = head-&amp;gt;next;
        head-&amp;gt;next = swapPairs(nextp);
        tem-&amp;gt;next = head;
        return tem;
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a linked list, swap every two adjacent nodes and return its head.&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;Given 1-&amp;gt;2-&amp;gt;3-&amp;gt;4, you should return the list as 2-&amp;gt;1-&amp;gt;4-&amp;gt;3.&lt;/p&gt;
&lt;p&gt;Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Easy" scheme="http://since1992.org/tags/Easy/"/>
    
      <category term="Linked List" scheme="http://since1992.org/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-198-House Robber</title>
    <link href="http://since1992.org/2016/06/11/Leetcode-198-House-Robber/"/>
    <id>http://since1992.org/2016/06/11/Leetcode-198-House-Robber/</id>
    <published>2016-06-11T03:40:46.000Z</published>
    <updated>2016-06-11T03:43:42.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.&lt;/p&gt;
&lt;p&gt;Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.&lt;/p&gt;
&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;一排房子每个房子有一个价值，一个小偷进行偷窃，不可以连续偷挨着的两家，求小偷的最大收益。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;简单的一维动态规划问题。每个房子要么不偷，要么偷，如果不偷收益和前一个房子一样，如果偷则为前两个房子的最大收益加上这个房子的价值，两种情况下最大的收益即为到这个房子为止的最大收益。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
public:
    int rob(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        if(nums.empty()) return 0;
        vector&amp;lt;int&amp;gt; dp(nums.size(),0);
        dp[0]=nums[0];
        dp[1]=nums[0]&amp;gt;nums[1]?nums[0]:nums[1];
        for(int i=2;i&amp;lt;nums.size();i++)
        {
            dp[i]=max(dp[i-1],dp[i-2]+nums[i]);
        }
        return dp.back();
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security system connected and it will automatically contact the police if two adjacent houses were broken into on the same night.&lt;/p&gt;
&lt;p&gt;Given a list of non-negative integers representing the amount of money of each house, determine the maximum amount of money you can rob tonight without alerting the police.&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Easy" scheme="http://since1992.org/tags/Easy/"/>
    
      <category term="Dynamic Programming" scheme="http://since1992.org/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-345-Reverse Vowels of a String</title>
    <link href="http://since1992.org/2016/06/11/Leetcode-345-Reverse-Vowels-of-a-String/"/>
    <id>http://since1992.org/2016/06/11/Leetcode-345-Reverse-Vowels-of-a-String/</id>
    <published>2016-06-11T03:31:12.000Z</published>
    <updated>2016-06-11T03:35:52.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Write a function that takes a string as input and reverse only the vowels of a string.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;Given s = “hello”, return “holle”.&lt;/p&gt;
&lt;p&gt;Example 2:&lt;br&gt;Given s = “leetcode”, return “leotcede”.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;反转一个字符串中所有元音字母的位置。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;记录下来元音字母的顺序以及位置，在位置中倒序插入字母即可。当然也可以使用双指针，从头尾开始扫描，一旦扫描到两个元音字母，则交换他们，这种算法可以使得额外空间代价降低到O(1)。本文只提供第一种解法。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
public:
    string reverseVowels(string s) {
        vector&amp;lt;char&amp;gt; c;
        vector&amp;lt;int&amp;gt; p;
        for(int i=0;i&amp;lt;s.length();i++)
        {
            if(isV(s[i]))
            {
                c.push_back(s[i]);
                p.push_back(i);
            }
        }
        for(int i=0;i&amp;lt;p.size();i++)
        {
            s[p[i]]=c[c.size()-1-i];
        }
        return s;

    }
    bool isV(char x)
    {
        return x==&amp;apos;a&amp;apos;||x==&amp;apos;e&amp;apos;||x==&amp;apos;i&amp;apos;||x==&amp;apos;o&amp;apos;||x==&amp;apos;u&amp;apos;||x==&amp;apos;A&amp;apos;||x==&amp;apos;E&amp;apos;||x==&amp;apos;I&amp;apos;||x==&amp;apos;O&amp;apos;||x==&amp;apos;U&amp;apos;;
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Write a function that takes a string as input and reverse only the vowels of a string.&lt;/p&gt;
&lt;p&gt;Example 1:&lt;br&gt;Given s = “hello”, return “holle”.&lt;/p&gt;
&lt;p&gt;Example 2:&lt;br&gt;Given s = “leetcode”, return “leotcede”.&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Easy" scheme="http://since1992.org/tags/Easy/"/>
    
      <category term="String" scheme="http://since1992.org/tags/String/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-21-Merge Two Sorted Lists</title>
    <link href="http://since1992.org/2016/06/11/Leetcode-21-Merge-Two-Sorted-Lists/"/>
    <id>http://since1992.org/2016/06/11/Leetcode-21-Merge-Two-Sorted-Lists/</id>
    <published>2016-06-11T03:21:44.000Z</published>
    <updated>2016-06-11T03:23:06.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;合并两个已排好序的单向链表&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;非常简单的链表基本操作，实现即可。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(!l1) return l2;
        if(!l2) return l1;
        ListNode* l3;
        if(l1-&amp;gt;val&amp;lt;l2-&amp;gt;val)
        {
            l3=l1;
            l3-&amp;gt;next=mergeTwoLists(l1-&amp;gt;next,l2);
        }else{
            l3=l2;
            l3-&amp;gt;next=mergeTwoLists(l1,l2-&amp;gt;next);
        }
        return l3;
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Merge two sorted linked lists and return it as a new list. The new list should be made by splicing together the nodes of the first two lists.&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Easy" scheme="http://since1992.org/tags/Easy/"/>
    
      <category term="Linked List" scheme="http://since1992.org/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-121-Best Time to Buy and Sell Stock</title>
    <link href="http://since1992.org/2016/06/10/Leetcode-121-Best-Time-to-Buy-and-Sell-Stock/"/>
    <id>http://since1992.org/2016/06/10/Leetcode-121-Best-Time-to-Buy-and-Sell-Stock/</id>
    <published>2016-06-10T15:17:29.000Z</published>
    <updated>2016-06-10T15:18:54.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.&lt;/p&gt;
&lt;p&gt;If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;有一个数组表示一段时间内某只股票每天的价格，如果你只能买卖一次，求你能获得的最大利润&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;依次找到最小值，然后再记录最大差值，返回最大差值即可。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
public:
    int maxProfit(vector&amp;lt;int&amp;gt;&amp;amp; prices) {
        if(prices.size()&amp;lt;2) return 0;
        vector&amp;lt;int&amp;gt;dp(prices.size(),0);
        int max=INT_MIN;
        int min=prices[0];
        for(int i=1;i&amp;lt;prices.size();i++)
        {
            if(prices[i]&amp;lt;min) min=prices[i];
            dp[i]=prices[i]-min;
            if(dp[i]&amp;gt;max)
            max=dp[i];

        }
        return max;
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.&lt;/p&gt;
&lt;p&gt;If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Easy" scheme="http://since1992.org/tags/Easy/"/>
    
      <category term="Dynamic Programming" scheme="http://since1992.org/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-153-Find Minimum in Rotated Sorted Array</title>
    <link href="http://since1992.org/2016/06/10/Leetcode-153-Find-Minimum-in-Rotated-Sorted-Array/"/>
    <id>http://since1992.org/2016/06/10/Leetcode-153-Find-Minimum-in-Rotated-Sorted-Array/</id>
    <published>2016-06-10T14:53:48.000Z</published>
    <updated>2016-06-10T14:56:57.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Suppose a sorted array is rotated at some pivot unknown to you beforehand.&lt;/p&gt;
&lt;p&gt;(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).&lt;/p&gt;
&lt;p&gt;Find the minimum element.&lt;/p&gt;
&lt;p&gt;You may assume no duplicate exists in the array.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;某个排好序的数组从某一点开始到数组结尾，被全体移动到数组的最开始位置。求这个数组的最小值。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;求数组的最小值，一般情况下需要遍历一次数组，即用O(n)的时间，不过这道题给定的是预先排好序的数组，而且是被移动的是整个子序列，所以我们可以使用二分查找的办法，把时间复杂度缩短到O(logn)。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
public:
    int findMin(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
        if(nums.size()==1) return nums[0];
        int begin=0,end=nums.size()-1,mid=begin+(end-begin)/2;
        while(begin&amp;lt;end)
        {
            if(nums[mid]&amp;gt;nums[mid+1]) return nums[mid+1];
            else if(nums[mid]&amp;lt;nums[end])
            {
                end=mid;
                mid=begin+(end-begin)/2;
            }
            else if(nums[mid]&amp;gt;nums[end])
            {
                begin=mid;
                mid=begin+(end-begin)/2;
            }

        }
        return nums[end];

    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Suppose a sorted array is rotated at some pivot unknown to you beforehand.&lt;/p&gt;
&lt;p&gt;(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).&lt;/p&gt;
&lt;p&gt;Find the minimum element.&lt;/p&gt;
&lt;p&gt;You may assume no duplicate exists in the array.&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Medium" scheme="http://since1992.org/tags/Medium/"/>
    
      <category term="Binary Search" scheme="http://since1992.org/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-116-Populating Next Right Pointers in Each Node</title>
    <link href="http://since1992.org/2016/06/10/Leetcode-116-Populating-Next-Right-Pointers-in-Each-Node/"/>
    <id>http://since1992.org/2016/06/10/Leetcode-116-Populating-Next-Right-Pointers-in-Each-Node/</id>
    <published>2016-06-10T14:41:03.000Z</published>
    <updated>2016-06-10T14:45:47.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a binary tree&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct TreeLinkNode {
  TreeLinkNode *left;
  TreeLinkNode *right;
  TreeLinkNode *next;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.&lt;/p&gt;
&lt;p&gt;Initially, all next pointers are set to NULL.&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;You may only use constant extra space.&lt;br&gt;You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).&lt;br&gt;For example,&lt;br&gt;Given the following perfect binary tree,&lt;br&gt;             1&lt;br&gt;           /  \&lt;br&gt;          2    3&lt;br&gt;         / \  / \&lt;br&gt;        4  5  6  7&lt;br&gt;After calling your function, the tree should look like:&lt;br&gt;             1 -&amp;gt; NULL&lt;br&gt;           /  \&lt;br&gt;          2 -&amp;gt; 3 -&amp;gt; NULL&lt;br&gt;         / \  / \&lt;br&gt;        4-&amp;gt;5-&amp;gt;6-&amp;gt;7 -&amp;gt; NULL&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;给一棵树添加右指针，每一行的末尾指向NULL。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;一个简单的DFS的问题，利用一个队列，完成层次遍历即可。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
public:
    void connect(TreeLinkNode *root) {
        if(!root) return;
        queue&amp;lt;TreeLinkNode*&amp;gt; q;
        q.push(root);
        q.push(NULL);
        while(!q.empty())
        {
            TreeLinkNode *tem = q.front();
            q.pop();

            if(tem)
            {
                tem-&amp;gt;next=q.front();
                if(tem-&amp;gt;left)
                    q.push(tem-&amp;gt;left);
                if(tem-&amp;gt;right)
                    q.push(tem-&amp;gt;right);

            }
            else
            {
                if(!q.empty())
                {
                    q.push(NULL);
                    continue;
                }
                else break;
            }
        }

    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a binary tree&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct TreeLinkNode {
  TreeLinkNode *left;
  TreeLinkNode *right;
  TreeLinkNode *next;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.&lt;/p&gt;
&lt;p&gt;Initially, all next pointers are set to NULL.&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;You may only use constant extra space.&lt;br&gt;You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).&lt;br&gt;For example,&lt;br&gt;Given the following perfect binary tree,&lt;br&gt;             1&lt;br&gt;           /  \&lt;br&gt;          2    3&lt;br&gt;         / \  / \&lt;br&gt;        4  5  6  7&lt;br&gt;After calling your function, the tree should look like:&lt;br&gt;             1 -&amp;gt; NULL&lt;br&gt;           /  \&lt;br&gt;          2 -&amp;gt; 3 -&amp;gt; NULL&lt;br&gt;         / \  / \&lt;br&gt;        4-&amp;gt;5-&amp;gt;6-&amp;gt;7 -&amp;gt; NULL&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Tree" scheme="http://since1992.org/tags/Tree/"/>
    
      <category term="DFS" scheme="http://since1992.org/tags/DFS/"/>
    
      <category term="Medium" scheme="http://since1992.org/tags/Medium/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-62-Unique Paths</title>
    <link href="http://since1992.org/2016/06/10/Leetcode-62-Unique-Paths/"/>
    <id>http://since1992.org/2016/06/10/Leetcode-62-Unique-Paths/</id>
    <published>2016-06-10T14:21:16.000Z</published>
    <updated>2016-06-10T14:45:44.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;A robot is located at the top-left corner of a m x n grid (marked ‘Start’ in the diagram below).&lt;/p&gt;
&lt;p&gt;The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).&lt;/p&gt;
&lt;p&gt;How many possible unique paths are there?&lt;br&gt;&lt;a href=&quot;http://leetcode.com/wp-content/uploads/2014/12/robot_maze.png&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;&lt;/a&gt;&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;如图所示，机器人从最左上角走到最右下角，它只能往右或者往下走，求它有多少种不重复的走法。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;一个简单的二维动态规划问题。对于第一行和第一列来说，走到该格子只能沿着直线走，所以走到这些格子的方法数为1.而其他的格子，因为只能往右和往下走，那么第（i,j）格可以由（i,j-1）往下走一步或者(i-1,j)往右走一步达到，所以该格子的方法数应该是这辆格数字的和。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;p&gt;class Solution {&lt;br&gt;    public:&lt;br&gt;        int uniquePaths(int m, int n) {&lt;br&gt;            vector&lt;int&gt; a(m,1);&lt;br&gt;            vector&lt;vector&lt;int&gt;&amp;gt; map;&lt;br&gt;            for(int i=0;i&amp;lt;n;i++)&lt;br&gt;            map.push_back(a);&lt;br&gt;            for(int i=1;i&amp;lt;n;i++)&lt;br&gt;                for(int j=1;j&amp;lt;m;j++)&lt;br&gt;                    map[i][j]=map[i-1][j]+map[i][j-1];&lt;br&gt;            return map[n-1][m-1];&lt;br&gt;        }&lt;br&gt;    };&lt;/vector&lt;int&gt;&lt;/int&gt;&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;A robot is located at the top-left corner of a m x n grid (marked ‘Start’ in the diagram below).&lt;/p&gt;
&lt;p&gt;The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).&lt;/p&gt;
&lt;p&gt;How many possible unique paths are there?&lt;br&gt;&lt;a href=&quot;http://leetcode.com/wp-content/uploads/2014/12/robot_maze.png&quot;&gt;&lt;/a&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Medium" scheme="http://since1992.org/tags/Medium/"/>
    
      <category term="Dynamic Programming" scheme="http://since1992.org/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-89-Gray Code</title>
    <link href="http://since1992.org/2016/06/10/Leetcode-89-Gray-Code/"/>
    <id>http://since1992.org/2016/06/10/Leetcode-89-Gray-Code/</id>
    <published>2016-06-10T01:32:25.000Z</published>
    <updated>2016-06-10T14:45:45.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;The gray code is a binary numeral system where two successive values differ in only one bit.&lt;/p&gt;
&lt;p&gt;Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.&lt;/p&gt;
&lt;p&gt;For example, given n = 2, return [0,1,3,2]. Its gray code sequence is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;00 - 0
01 - 1
11 - 3
10 - 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note:&lt;br&gt;For a given n, a gray code sequence is not uniquely defined.&lt;/p&gt;
&lt;p&gt;For example, [0,2,3,1] is also a valid gray code sequence according to the above definition.&lt;/p&gt;
&lt;p&gt;For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;灰码是指邻近的数字只有一位相差，输入一个数字，求出该数字位数相符的灰码序列。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;首先，对于什么是灰码，请参见&lt;a href=&quot;https://en.wikipedia.org/wiki/Gray_code&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;维基百科&lt;/a&gt;。我觉得和&lt;a href=&quot;/2016/05/23/Leetcode-338-Counting-Bits/&quot;&gt;这道题&lt;/a&gt;比较相似。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        vector&amp;lt;int&amp;gt; grayCode(int n) {
            vector&amp;lt;int&amp;gt; res;
            res.push_back(0);
            for(int i=0;i&amp;lt;n;i++)
                {
                    int high=1&amp;lt;&amp;lt;i;
                    int size=res.size();
                    for(int j=size-1;j&amp;gt;=0;j--)
                        res.push_back(high+res[j]);
                }
            return res;

        }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;The gray code is a binary numeral system where two successive values differ in only one bit.&lt;/p&gt;
&lt;p&gt;Given a non-negative integer n representing the total number of bits in the code, print the sequence of gray code. A gray code sequence must begin with 0.&lt;/p&gt;
&lt;p&gt;For example, given n = 2, return [0,1,3,2]. Its gray code sequence is:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;00 - 0
01 - 1
11 - 3
10 - 2
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note:&lt;br&gt;For a given n, a gray code sequence is not uniquely defined.&lt;/p&gt;
&lt;p&gt;For example, [0,2,3,1] is also a valid gray code sequence according to the above definition.&lt;/p&gt;
&lt;p&gt;For now, the judge is able to judge based on one instance of gray code sequence. Sorry about that.&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Medium" scheme="http://since1992.org/tags/Medium/"/>
    
      <category term="Backtracking" scheme="http://since1992.org/tags/Backtracking/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-53-Maximum Subarray</title>
    <link href="http://since1992.org/2016/06/09/Leetcode-53-Maximum-Subarray/"/>
    <id>http://since1992.org/2016/06/09/Leetcode-53-Maximum-Subarray/</id>
    <published>2016-06-09T09:26:20.000Z</published>
    <updated>2016-06-10T14:45:50.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Find the contiguous subarray within an array (containing at least one number) which has the largest sum.&lt;/p&gt;
&lt;p&gt;For example, given the array [−2,1,−3,4,−1,2,1,−5,4],&lt;br&gt;the contiguous subarray [4,−1,2,1] has the largest sum = 6.&lt;/p&gt;
&lt;p&gt;click to show more practice.&lt;/p&gt;
&lt;p&gt;More practice:&lt;br&gt;If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;对于给定的一个数组，找出其子序列中和最大的一个。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;本题如果做动态规划，则复杂度为O(n)，对于当前和来讲，如果加上某个元素时和为负数，则舍弃。另用一个变量来储存历史中最大的和。注意考虑到最大和有可能是负数，初始化时应该把max初始化为INT_MIN.&lt;/p&gt;
&lt;p&gt;Follow up: 如果想用分治法来解这道题，那么可以这样做：最大的和要么存在于前半个数组中，要么存在于后半个数组中，要么存在于中间往两边延伸。求出这三种情况的最大值中最大那个，即为我们所求。代码请读者自己完成。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        int maxSubArray(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
            vector&amp;lt;int&amp;gt; dp(nums.size(),0);
            int sum=0;
            int max=INT_MIN;
            for(int i=0;i&amp;lt;nums.size();i++)
                {
                       sum+=nums[i];
                       if(sum&amp;gt;max)
                           max=sum;
                       if(sum&amp;lt;0)
                           sum=0;
                }
            return max;

    }

};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Find the contiguous subarray within an array (containing at least one number) which has the largest sum.&lt;/p&gt;
&lt;p&gt;For example, given the array [−2,1,−3,4,−1,2,1,−5,4],&lt;br&gt;the contiguous subarray [4,−1,2,1] has the largest sum = 6.&lt;/p&gt;
&lt;p&gt;click to show more practice.&lt;/p&gt;
&lt;p&gt;More practice:&lt;br&gt;If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Medium" scheme="http://since1992.org/tags/Medium/"/>
    
      <category term="Dynamic Programming" scheme="http://since1992.org/tags/Dynamic-Programming/"/>
    
      <category term="Divide and Conqure" scheme="http://since1992.org/tags/Divide-and-Conqure/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-309-Best Time to Buy and Sell Stock With Cooldown</title>
    <link href="http://since1992.org/2016/06/09/Leetcode-309-Best-Time-to-Buy-and-Sell-Stock-With-Cooldown/"/>
    <id>http://since1992.org/2016/06/09/Leetcode-309-Best-Time-to-Buy-and-Sell-Stock-With-Cooldown/</id>
    <published>2016-06-09T08:55:17.000Z</published>
    <updated>2016-06-10T14:45:50.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.&lt;/p&gt;
&lt;p&gt;Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:&lt;/p&gt;
&lt;p&gt;You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).&lt;br&gt;After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)&lt;br&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prices = [1, 2, 3, 0, 2]
maxProfit = 3
transactions = [buy, sell, cooldown, buy, sell]
&lt;/code&gt;&lt;/pre&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;有一个数组表示第I天某只股票的价格。设计一个算法求出买卖这只股票的最大收益，买入之前必须先卖出，卖出后第二天不能进行买入操作。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;一个典型的动态规划问题。我们可以如下分析动态规划问题：&lt;br&gt;状态：买入，卖出，所以我们需要2个数组buy[n],sell[n]分别记录第N天如果买入/卖出，已经获得的最大收益。&lt;br&gt;状态转移方程：对于买入来说，如果今天没有买入，则获益和昨天一样（因为没有发生交易），如果今天买入了，则I-2天之前必须要卖出，则获益为sell[i-2]-price[i]，两种情况下最大值即为当天的buy[i]值（buy[i]=max(buy[i-1],sell[i-2]-prices[i]).&lt;br&gt;对于卖出来说，如果今天没有卖出，则收益和昨天一样（因为没有发生交易），以及如果昨天买入了，今天卖出，则总收益为sell[i-1]+prices[i]，两种情况下最大值即为当天的sell[i]值。而股票收益仅当你不持有股票时才能体现出来，所以我们要的值即为sell数组的最后一个值。&lt;br&gt;初始状态：对于两个数组来说，Buy[0]即第一天买入，收益当然为-prices[0],而buy[1]则表示按照低价买入，所以应当为前两天价格低者的相反数。对于Sell[0]而言，第一天因为之前没有持有股票，所以sell[0]=0，而sell[1]则表示第2天卖出股票的最大收益，那么如果第二天的股价低于第一天，则为0，若高于第一天，则为差价。&lt;br&gt;Follow up:&lt;br&gt;当然了，我们不难发现，状态方程里每天的收益仅仅和前两天的买入/卖出收益相关，所以我们可以improve我们的空间复杂度从O（n）到O(1)。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        int maxProfit(vector&amp;lt;int&amp;gt;&amp;amp; prices) {
            if(prices.size()&amp;lt;2) return 0;
            vector&amp;lt;int&amp;gt; buy(prices.size(),0);
            vector&amp;lt;int&amp;gt; sell(prices.size(),0);
            buy[0]=-prices[0];
            buy[1]=max(-prices[0],-prices[1]);
            sell[0]=0;
            sell[1]=max(0,prices[1]-prices[0]);
            for(int i=2;i&amp;lt;prices.size();i++)
                {
                    buy[i]=max(buy[i-1],sell[i-2]-prices[i]);
                    sell[i]=max(sell[i-1],buy[i-1]+prices[i]);
                }
            return sell.back();
        }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.&lt;/p&gt;
&lt;p&gt;Design an algorithm to find the maximum profit. You may complete as many transactions as you like (ie, buy one and sell one share of the stock multiple times) with the following restrictions:&lt;/p&gt;
&lt;p&gt;You may not engage in multiple transactions at the same time (ie, you must sell the stock before you buy again).&lt;br&gt;After you sell your stock, you cannot buy stock on next day. (ie, cooldown 1 day)&lt;br&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;prices = [1, 2, 3, 0, 2]
maxProfit = 3
transactions = [buy, sell, cooldown, buy, sell]
&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Medium" scheme="http://since1992.org/tags/Medium/"/>
    
      <category term="Mark" scheme="http://since1992.org/tags/Mark/"/>
    
      <category term="Dynamic Programming" scheme="http://since1992.org/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode-350-Intersection of Two Arrays II</title>
    <link href="http://since1992.org/2016/06/07/Leetcode-350-Intersection-of-Two-Arrays-II/"/>
    <id>http://since1992.org/2016/06/07/Leetcode-350-Intersection-of-Two-Arrays-II/</id>
    <published>2016-06-07T15:39:24.000Z</published>
    <updated>2016-06-07T15:48:27.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;Each element in the result should appear as many times as it shows in both arrays.&lt;br&gt;The result can be in any order.&lt;br&gt;Follow up:&lt;br&gt;What if the given array is already sorted? How would you optimize your algorithm?&lt;br&gt;What if nums1’s size is small compared to nums2’s size? Which algorithm is better?&lt;br&gt;What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?&lt;br&gt;&lt;a id=&quot;more&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;给定两个数组，写一个函数来返回两个数组的交集，如果有重复的也需要返回。&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;本题和&lt;a href=&quot;/2016/05/23/Leetcode-349-Intersection-of-Two-Arrays/&quot;&gt;这道题&lt;/a&gt;略有不同。本题需要返回交集中的重复数字。其实类似于这类集合的交、并集问题，&lt;a href=&quot;https://www.quora.com/Programming-Interview-Questions-How-do-you-find-out-intersection-between-two-arrays-when-they-are-sorted-when-they-are-not-sorted&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这篇文章&lt;/a&gt;讲的非常详细，推荐读一读。一个简单的算法，先对数组进行排序，然后使用双指针，当遍历完短数组后结束。这样复杂度为O(nlogn+mlogm)。如果是已排好序的数组，或者某一个数组已排好序，可以对未排序数组的每个元素在已排序数组里进行二分查找，复杂度为O(m*logn).本文提供排序后双指针的解法。&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        vector&amp;lt;int&amp;gt; intersect(vector&amp;lt;int&amp;gt;&amp;amp; nums1, vector&amp;lt;int&amp;gt;&amp;amp; nums2) {
            vector&amp;lt;int&amp;gt; res;
            if(nums1.empty()||nums2.empty()) return res;
            sort(nums1.begin(),nums1.end());
            sort(nums2.begin(),nums2.end());
            int i=0,j=0;
               while(i&amp;lt;nums1.size()&amp;amp;&amp;amp;j&amp;lt;nums2.size())
                   {
                       if(nums1[i]==nums2[j]){
                         res.push_back(nums1[i]);
                         i++;
                         j++;
                   }
                       else if(nums1[i]&amp;gt;nums2[j]) j++;
                       else i++;
           }
               return res;
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given two arrays, write a function to compute their intersection.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given nums1 = [1, 2, 2, 1], nums2 = [2, 2], return [2, 2].&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;Each element in the result should appear as many times as it shows in both arrays.&lt;br&gt;The result can be in any order.&lt;br&gt;Follow up:&lt;br&gt;What if the given array is already sorted? How would you optimize your algorithm?&lt;br&gt;What if nums1’s size is small compared to nums2’s size? Which algorithm is better?&lt;br&gt;What if elements of nums2 are stored on disk, and the memory is limited such that you cannot load all elements into the memory at once?&lt;br&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://since1992.org/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://since1992.org/tags/Leetcode/"/>
    
      <category term="Easy" scheme="http://since1992.org/tags/Easy/"/>
    
      <category term="Hash Table" scheme="http://since1992.org/tags/Hash-Table/"/>
    
      <category term="Two Pointers" scheme="http://since1992.org/tags/Two-Pointers/"/>
    
      <category term="Binary Search" scheme="http://since1992.org/tags/Binary-Search/"/>
    
      <category term="Sort" scheme="http://since1992.org/tags/Sort/"/>
    
  </entry>
  
</feed>
