<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-05-22T11:42:25.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Fan Yang</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode-344-Reverse String</title>
    <link href="http://yoursite.com/2016/05/22/Leetcode-344-Reverse-String/"/>
    <id>http://yoursite.com/2016/05/22/Leetcode-344-Reverse-String/</id>
    <published>2016-05-22T11:32:54.000Z</published>
    <updated>2016-05-22T11:42:25.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Write a function that takes a string as input and returns the string reversed.&lt;/p&gt;
&lt;p&gt;Example:&lt;br&gt;Given s = “hello”, return “olleh”.&lt;/p&gt;
&lt;h2 id=&quot;题目大意：&quot;&gt;&lt;a href=&quot;#题目大意：&quot; class=&quot;headerlink&quot; title=&quot;题目大意：&quot;&gt;&lt;/a&gt;题目大意：&lt;/h2&gt;&lt;p&gt;反转一个给定字符串&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
public:
    string reverseString(string s) {
        string res=&amp;quot;&amp;quot;;
        for(int i = 0; i&amp;lt;s.length();i++)
        res=s[i]+res;

        return res;
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Easy" scheme="http://yoursite.com/tags/Easy/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录84-Minimum Path Sum</title>
    <link href="http://yoursite.com/2015/10/29/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9584-Minimum-Path-Sum/"/>
    <id>http://yoursite.com/2015/10/29/Leetcode刷题记录84-Minimum-Path-Sum/</id>
    <published>2015-10-29T04:45:26.000Z</published>
    <updated>2015-10-29T16:47:03.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a m x n grid filled with non-negative numbers, find a path from top left to bottom right which minimizes the sum of all numbers along its path.&lt;/p&gt;
&lt;p&gt;Note: You can only move either down or right at any point in time.&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;A simple 2D dynamic programming problem&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        int minPathSum(vector&amp;lt;vector&amp;lt;int&amp;gt;&amp;gt;&amp;amp; grid) {
            int m=grid[0].size();
            int n=grid.size();
            int solution[n][m];
            solution[0][0]=grid[0][0];
            for(int i=1;i&amp;lt;m;i++)
                solution[0][i]=solution[0][i-1]+grid[0][i];
            for(int j=1;j&amp;lt;n;j++)
                solution[j][0]=solution[j-1][0]+grid[j][0];

            for(int j=1;j&amp;lt;n;j++)
                for(int i=1;i&amp;lt;m;i++)
                    solution[j][i]=min(solution[j-1][i],solution[j][i-1])+grid[j][i];

            return solution[n-1][m-1];

    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录83-Swap Nodes in Pairs</title>
    <link href="http://yoursite.com/2015/10/27/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9583-Swap-Nodes-in-Pairs/"/>
    <id>http://yoursite.com/2015/10/27/Leetcode刷题记录83-Swap-Nodes-in-Pairs/</id>
    <published>2015-10-27T14:41:20.000Z</published>
    <updated>2015-10-28T02:43:55.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a linked list, swap every two adjacent nodes and return its head.&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;Given 1-&amp;gt;2-&amp;gt;3-&amp;gt;4, you should return the list as 2-&amp;gt;1-&amp;gt;4-&amp;gt;3.&lt;/p&gt;
&lt;p&gt;Your algorithm should use only constant space. You may not modify the values in the list, only nodes itself can be changed.&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;exchange every pair. remember to keep the pre of next pair.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
    public:
        ListNode* swapPairs(ListNode* head) {
            if(!head||!head-&amp;gt;next) 
                return head;
            ListNode * a= head;
            ListNode * b= a-&amp;gt;next;
            ListNode * newhead =b;
            ListNode* pre= new ListNode(-1);
            pre-&amp;gt;next=head;
            while(b&amp;amp;&amp;amp;a)
                {
                    a-&amp;gt;next=b-&amp;gt;next;
                    b-&amp;gt;next=a;
                    pre-&amp;gt;next=b;
                    pre=a;
                    a=a-&amp;gt;next;
                    if(a)
                    b=a-&amp;gt;next;
                    else break;
                }
            return newhead;
       }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录82-Sort Colors</title>
    <link href="http://yoursite.com/2015/10/27/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9582-Sort-Colors/"/>
    <id>http://yoursite.com/2015/10/27/Leetcode刷题记录82-Sort-Colors/</id>
    <published>2015-10-27T12:46:35.000Z</published>
    <updated>2015-10-28T01:33:51.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given an array with n objects colored red, white or blue, sort them so that objects of the same color are adjacent, with the colors in the order red, white and blue.&lt;/p&gt;
&lt;p&gt;Here, we will use the integers 0, 1, and 2 to represent the color red, white, and blue respectively.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;You are not suppose to use the library’s sort function for this problem.&lt;/p&gt;
&lt;p&gt;click to show follow up.&lt;/p&gt;
&lt;p&gt;Follow up:&lt;br&gt;A rather straight forward solution is a two-pass algorithm using counting sort.&lt;br&gt;First, iterate the array counting number of 0’s, 1’s, and 2’s, then overwrite array with total number of 0’s, then 1’s and followed by 2’s.&lt;/p&gt;
&lt;p&gt;Could you come up with an one-pass algorithm using only constant space?&lt;/p&gt;
&lt;h2 id=&quot;Solution-1&quot;&gt;&lt;a href=&quot;#Solution-1&quot; class=&quot;headerlink&quot; title=&quot;Solution 1:&quot;&gt;&lt;/a&gt;Solution 1:&lt;/h2&gt;&lt;p&gt;A typical counting sort problem. &lt;/p&gt;
&lt;h2 id=&quot;Code-in-C-for-Solution-1&quot;&gt;&lt;a href=&quot;#Code-in-C-for-Solution-1&quot; class=&quot;headerlink&quot; title=&quot;Code in C++ for Solution 1:&quot;&gt;&lt;/a&gt;Code in C++ for Solution 1:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        void sortColors(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
            int numof0=0;
            int numof1=0;
            int numof2=0;
            for(int i=0;i&amp;lt;nums.size();i++)
                {
                    switch(nums[i])
                        {
                            case 0 : numof0++;break;
                            case 1 : numof1++;break;
                            case 2 : numof2++;break;
                            default: break;
                           }
                   }
            for(int i=0;i&amp;lt;numof0;i++)
                nums[i]=0;
            for(int j=0;j&amp;lt;numof1;j++)
                nums[j+numof0]=1;
            for(int k=numof0+numof1;k&amp;lt;nums.size();k++)
                nums[k]=2;

        }
};
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Solution-2&quot;&gt;&lt;a href=&quot;#Solution-2&quot; class=&quot;headerlink&quot; title=&quot;Solution 2:&quot;&gt;&lt;/a&gt;Solution 2:&lt;/h2&gt;&lt;p&gt;Using two pointers to seprate those parts.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C-for-Solution-2&quot;&gt;&lt;a href=&quot;#Code-in-C-for-Solution-2&quot; class=&quot;headerlink&quot; title=&quot;Code in C++ for Solution 2:&quot;&gt;&lt;/a&gt;Code in C++ for Solution 2:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        void sortColors(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
            int indexof0=0;
            int indexof2=nums.size()-1;
            int i=0;
            while(i&amp;lt;=indexof2)
                {
                    if(nums[i]==0)
                        {
                            swap(nums[i],nums[indexof0]);
                            indexof0++;
                            i++;
                        }
                    else if(nums[i]==2)
                        {
                            swap(nums[i],nums[indexof2]);
                            indexof2--;
                        }
                    else i++;
            }

    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="Sort" scheme="http://yoursite.com/tags/Sort/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录81-Best Time to Buy and Sell Stock</title>
    <link href="http://yoursite.com/2015/10/27/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9581-Best-Time-to-Buy-and-Sell-Stock/"/>
    <id>http://yoursite.com/2015/10/27/Leetcode刷题记录81-Best-Time-to-Buy-and-Sell-Stock/</id>
    <published>2015-10-27T05:05:52.000Z</published>
    <updated>2015-10-27T17:08:26.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Say you have an array for which the ith element is the price of a given stock on day i.&lt;/p&gt;
&lt;p&gt;If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit.&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;This problem is very similar to &lt;a href=&quot;/2015/10/25/Leetcode刷题记录77-Maximum-Subarray/&quot;&gt;This problem&lt;/a&gt;.Just change the array into the change array.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        int maxProfit(vector&amp;lt;int&amp;gt;&amp;amp; prices) {
            if(prices.empty()) 
                return 0;
            int change[prices.size()];
            change[0]=0;
            for(int i=1;i&amp;lt;prices.size();i++)
                change[i]=prices[i]-prices[i-1];
            int res=INT_MIN;
               int sum=0;
            for(int i=0;i&amp;lt;prices.size();i++){
                sum= sum&amp;gt;=0? sum+change[i]:change[i];
                res=max(res,sum);
        }
            return res;
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录80-Unique Paths</title>
    <link href="http://yoursite.com/2015/10/27/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9580-Unique-Paths/"/>
    <id>http://yoursite.com/2015/10/27/Leetcode刷题记录80-Unique-Paths/</id>
    <published>2015-10-27T02:51:42.000Z</published>
    <updated>2015-10-31T12:54:39.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Descriptions&quot;&gt;&lt;a href=&quot;#Problem-Descriptions&quot; class=&quot;headerlink&quot; title=&quot;Problem Descriptions:&quot;&gt;&lt;/a&gt;Problem Descriptions:&lt;/h2&gt;&lt;p&gt;A robot is located at the top-left corner of a m x n grid (marked ‘Start’ in the diagram below).&lt;/p&gt;
&lt;p&gt;The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).&lt;/p&gt;
&lt;p&gt;How many possible unique paths are there?&lt;/p&gt;
&lt;h2 id=&quot;Solutions-1&quot;&gt;&lt;a href=&quot;#Solutions-1&quot; class=&quot;headerlink&quot; title=&quot;Solutions 1:&quot;&gt;&lt;/a&gt;Solutions 1:&lt;/h2&gt;&lt;p&gt;Using recursive call. It’s like the &lt;a href=&quot;/2015/10/10/Leetcode刷题记录34-Climbing-Stairs/&quot;&gt;Climbing stairs problem&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C-for-Solution-1&quot;&gt;&lt;a href=&quot;#Code-in-C-for-Solution-1&quot; class=&quot;headerlink&quot; title=&quot;Code in C++ for Solution 1:&quot;&gt;&lt;/a&gt;Code in C++ for Solution 1:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        int uniquePaths(int m, int n) {
            if(m==1||n==1) return 1;
            else return uniquePaths(m-1,n)+uniquePaths(m,n-1);

    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Solution-2&quot;&gt;&lt;a href=&quot;#Solution-2&quot; class=&quot;headerlink&quot; title=&quot;Solution 2:&quot;&gt;&lt;/a&gt;Solution 2:&lt;/h2&gt;&lt;p&gt;Using a map to record the best solutions(using dynamic programming)&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C-for-Solution-2&quot;&gt;&lt;a href=&quot;#Code-in-C-for-Solution-2&quot; class=&quot;headerlink&quot; title=&quot;Code in C++ for Solution 2:&quot;&gt;&lt;/a&gt;Code in C++ for Solution 2:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
       public:
           int uniquePaths(int m, int n) {
           int a[m][n];
           for(int i=0;i&amp;lt;m;i++)
                a[i][n-1]=1;
           for(int i=0;i&amp;lt;n;i++)
               a[m-1][i]=1;
           for(int i=m-2;i&amp;gt;=0;i--)
               for(int j=n-2;j&amp;gt;=0;j--)
                   a[i][j]=a[i+1][j]+a[i][j+1];
           return a[0][0];
        }
    };
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Descriptions&quot;&gt;&lt;a href=&quot;#Problem-Descriptions&quot; class=&quot;headerlink&quot; title=&quot;Problem Descriptions:&quot;&gt;&lt;/a&gt;Problem Descriptions:&lt;/h2
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录79-Find Minimum</title>
    <link href="http://yoursite.com/2015/10/27/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9579-Find-Minimum/"/>
    <id>http://yoursite.com/2015/10/27/Leetcode刷题记录79-Find-Minimum/</id>
    <published>2015-10-27T02:43:09.000Z</published>
    <updated>2015-10-27T14:45:16.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Suppose a sorted array is rotated at some pivot unknown to you beforehand.&lt;/p&gt;
&lt;p&gt;(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).&lt;/p&gt;
&lt;p&gt;Find the minimum element.&lt;/p&gt;
&lt;p&gt;You may assume no duplicate exists in the array.&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;Using binary search&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        int findMin(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
            int begin =0;
            int end = nums.size()-1;
            int mid =begin+(end-begin)/2;
            if(nums[end]&amp;gt;nums[begin]) return nums[begin];
            while(end-begin&amp;gt;1)
                {
                    if(nums[mid-1]&amp;gt;nums[mid])
                        return nums[mid];
                    else if(nums[mid]&amp;lt;nums[begin])
                        {
                            end = mid ;
                            mid = begin + (end-begin)/2;
                        }
                    else if (nums[mid]&amp;gt;nums[begin])
                        {
                            begin = mid;
                            mid = begin + (end-begin)/2;
                        }
                }
            return min(nums[end],nums[begin]);

        }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录78-Convert Sorted Array to Binary Search Tree</title>
    <link href="http://yoursite.com/2015/10/25/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9578-Convert-Sorted-Array-to-Binary-Search-Tree/"/>
    <id>http://yoursite.com/2015/10/25/Leetcode刷题记录78-Convert-Sorted-Array-to-Binary-Search-Tree/</id>
    <published>2015-10-25T08:09:55.000Z</published>
    <updated>2015-10-25T20:12:32.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given an array where elements are sorted in ascending order, convert it to a height balanced BST.&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;Do it recursively. use mid element to be the root.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    public:
        TreeNode* sortedArrayToBST(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
            vector&amp;lt;int&amp;gt; a;
            vector&amp;lt;int&amp;gt; b;
            int mid=nums.size()/2;
            for(int i=0;i&amp;lt;mid;i++)
            a.push_back(nums[i]);
            for(int i=mid+1;i&amp;lt;nums.size();i++)
            b.push_back(nums[i]);
            if(nums.size()==0) 
                return NULL;
            else if(nums.size()==1)
                {
                    TreeNode* t= new TreeNode(nums[0]);
                    return t;
                }
            else
                {
                       TreeNode* root =new TreeNode(nums[mid]);
                       root-&amp;gt;left= sortedArrayToBST(a);
                       root-&amp;gt;right=sortedArrayToBST(b);
                       return root;
                }
        }
    };
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="Depth First Search" scheme="http://yoursite.com/tags/Depth-First-Search/"/>
    
      <category term="Binary Search Tree" scheme="http://yoursite.com/tags/Binary-Search-Tree/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录77-Maximum Subarray</title>
    <link href="http://yoursite.com/2015/10/25/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9577-Maximum-Subarray/"/>
    <id>http://yoursite.com/2015/10/25/Leetcode刷题记录77-Maximum-Subarray/</id>
    <published>2015-10-25T06:51:03.000Z</published>
    <updated>2015-10-25T20:18:43.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Descriptions&quot;&gt;&lt;a href=&quot;#Problem-Descriptions&quot; class=&quot;headerlink&quot; title=&quot;Problem Descriptions:&quot;&gt;&lt;/a&gt;Problem Descriptions:&lt;/h2&gt;&lt;p&gt;Find the contiguous subarray within an array (containing at least one number) which has the largest sum.&lt;/p&gt;
&lt;p&gt;For example, given the array [−2,1,−3,4,−1,2,1,−5,4],&lt;br&gt;the contiguous subarray [4,−1,2,1] has the largest sum = 6.&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;Once the sum is less than 0, start from the current element.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        int maxSubArray(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
            int res=INT_MIN;
            int sum=0;
            for(int i=0;i&amp;lt;nums.size();i++){
                sum= sum&amp;gt;=0? sum+nums[i]:nums[i];
                res=max(res,sum);
            }
        return res;
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Descriptions&quot;&gt;&lt;a href=&quot;#Problem-Descriptions&quot; class=&quot;headerlink&quot; title=&quot;Problem Descriptions:&quot;&gt;&lt;/a&gt;Problem Descriptions:&lt;/h2
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录76-Integer to Roman</title>
    <link href="http://yoursite.com/2015/10/25/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9576-Integer-to-Roman/"/>
    <id>http://yoursite.com/2015/10/25/Leetcode刷题记录76-Integer-to-Roman/</id>
    <published>2015-10-25T04:55:10.000Z</published>
    <updated>2015-10-25T17:51:02.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given an integer, convert it to a roman numeral.&lt;/p&gt;
&lt;p&gt;Input is guaranteed to be within the range from 1 to 3999.&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;Like coin pick problems, just use greedy algorithm&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        string intToRoman(int num) {
            string res=&amp;quot;&amp;quot;;
            int a[13]={1000,900,500,400,100,90,50,40,10,9,5,4,1};
            string x[13]={&amp;quot;M&amp;quot;,&amp;quot;CM&amp;quot;,&amp;quot;D&amp;quot;,&amp;quot;CD&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;XC&amp;quot;,&amp;quot;L&amp;quot;,&amp;quot;XL&amp;quot;,&amp;quot;X&amp;quot;,&amp;quot;IX&amp;quot;,&amp;quot;V&amp;quot;,&amp;quot;IV&amp;quot;,&amp;quot;I&amp;quot;};
            for(int i=0;i&amp;lt;13;i++)
                {
                    if(num&amp;gt;=a[i])
                        {
                            for(int j=0;j&amp;lt;num/a[i];j++)
                                res+=x[i];
                                num%=a[i];
                        }
                }
            return res;

        }
    };
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="String" scheme="http://yoursite.com/tags/String/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Greedy" scheme="http://yoursite.com/tags/Greedy/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录75-Search Insert Position</title>
    <link href="http://yoursite.com/2015/10/25/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9575-Search-Insert-Position/"/>
    <id>http://yoursite.com/2015/10/25/Leetcode刷题记录75-Search-Insert-Position/</id>
    <published>2015-10-25T03:17:06.000Z</published>
    <updated>2015-10-25T20:18:57.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a sorted array and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.&lt;/p&gt;
&lt;p&gt;You may assume no duplicates in the array.&lt;/p&gt;
&lt;p&gt;Here are few examples.&lt;br&gt;[1,3,5,6], 5 → 2&lt;br&gt;[1,3,5,6], 2 → 1&lt;br&gt;[1,3,5,6], 7 → 4&lt;br&gt;[1,3,5,6], 0 → 0&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;Using binary search&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        int searchInsert(vector&amp;lt;int&amp;gt;&amp;amp; nums, int target) {
            int begin =0;
            int end = nums.size()-1;
            int mid = begin+(end-begin)/2;
            while(end-begin&amp;gt;1)
                    {
                    if(nums[mid]==target) 
                        return mid;
                    else if(nums[mid]&amp;gt;target)
                        {
                            end=mid;
                            mid=begin+(end-begin)/2;
                            continue;
                        }
                    else if(nums[mid]&amp;lt;target)
                        {
                            begin=mid;
                            mid=begin+(end-begin)/2;
                            continue;
                        }
                }
            if(target&amp;lt;=nums[begin])return begin;
            if(target&amp;gt;nums[end]) return end+1;
            return end;

    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Array" scheme="http://yoursite.com/tags/Array/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Binary Search" scheme="http://yoursite.com/tags/Binary-Search/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录74-Unique Binary Search Tree</title>
    <link href="http://yoursite.com/2015/10/25/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9574-Unique-Binary-Search-Tree/"/>
    <id>http://yoursite.com/2015/10/25/Leetcode刷题记录74-Unique-Binary-Search-Tree/</id>
    <published>2015-10-25T02:45:37.000Z</published>
    <updated>2015-10-25T14:50:08.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given n, how many structurally unique BST’s (binary search trees) that store values 1…n?&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;Given n = 3, there are a total of 5 unique BST’s.&lt;/p&gt;
&lt;p&gt;   1         3     3      2      1&lt;br&gt;    \       /     /      / \      \&lt;br&gt;     3     2     1      1   3      2&lt;br&gt;    /     /       \                 \&lt;br&gt;   2     1         2                 3&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot; Solutions:&quot;&gt;&lt;/a&gt; Solutions:&lt;/h2&gt;&lt;p&gt; A unique binary search tree using i as root in n nodes are (0~i-1) in the left and (i+1~n) in the right. So we can do a dynamic programming.&lt;/p&gt;
&lt;p&gt; Updates:&lt;br&gt; You can see from &lt;a href=&quot;https://en.wikipedia.org/wiki/Catalan_number&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;here&lt;/a&gt; . This kind of number is called “Catalan number”.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot; Code in C++:&quot;&gt;&lt;/a&gt; Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        int numTrees(int n) {
            int res[n+1]={0};
            res[0]=1;
            res[1]=1;
            for(int i=2;i&amp;lt;=n;i++)
                    for(int j=0;j&amp;lt;i;j++)
                      res[i]+=res[j]*res[i-1-j];
            return res[n];
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
      <category term="Binary Search Tree" scheme="http://yoursite.com/tags/Binary-Search-Tree/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录73-Missing Number</title>
    <link href="http://yoursite.com/2015/10/24/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9573-Missing-Number/"/>
    <id>http://yoursite.com/2015/10/24/Leetcode刷题记录73-Missing-Number/</id>
    <published>2015-10-24T15:59:52.000Z</published>
    <updated>2015-10-25T04:21:58.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given an array containing n distinct numbers taken from 0, 1, 2, …, n, find the one that is missing from the array.&lt;/p&gt;
&lt;p&gt;For example,&lt;br&gt;Given nums = [0, 1, 3] return 2.&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;Your algorithm should run in linear runtime complexity. Could you implement it using only constant extra space complexity?&lt;/p&gt;
&lt;h2 id=&quot;Solution-1&quot;&gt;&lt;a href=&quot;#Solution-1&quot; class=&quot;headerlink&quot; title=&quot;Solution 1:&quot;&gt;&lt;/a&gt;Solution 1:&lt;/h2&gt;&lt;p&gt;If we have O(n) extra space. we can mark every appeard element.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C-for-Solution-1&quot;&gt;&lt;a href=&quot;#Code-in-C-for-Solution-1&quot; class=&quot;headerlink&quot; title=&quot;Code in C++ for Solution 1:&quot;&gt;&lt;/a&gt;Code in C++ for Solution 1:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        int missingNumber(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
            bool flag[nums.size()+1];
            for(int i=0;i&amp;lt;nums.size();i++) 
                flag[i]=false;
            for(int i=0;i&amp;lt;nums.size();i++)
                flag[nums[i]]= true;
            for(int i=0;i&amp;lt;nums.size();i++)
                if(!flag[i]) return i;
            return nums.size();

    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Solution-2&quot;&gt;&lt;a href=&quot;#Solution-2&quot; class=&quot;headerlink&quot; title=&quot;Solution 2:&quot;&gt;&lt;/a&gt;Solution 2:&lt;/h2&gt;&lt;p&gt;We can add the total number and minus every element.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C-for-Solution-2&quot;&gt;&lt;a href=&quot;#Code-in-C-for-Solution-2&quot; class=&quot;headerlink&quot; title=&quot;Code in C++ for Solution 2:&quot;&gt;&lt;/a&gt;Code in C++ for Solution 2:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        int missingNumber(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
            int res=nums.size();
            for(int i=0;i&amp;lt;nums.size();i++)
                res += (i-nums[i]);
            return res;

    }
};
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Solution-3&quot;&gt;&lt;a href=&quot;#Solution-3&quot; class=&quot;headerlink&quot; title=&quot;Solution 3:&quot;&gt;&lt;/a&gt;Solution 3:&lt;/h2&gt;&lt;p&gt;Use Bit Manipulation(which I don’t know very well)&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C-for-Solution-3&quot;&gt;&lt;a href=&quot;#Code-in-C-for-Solution-3&quot; class=&quot;headerlink&quot; title=&quot;Code in C++ for Solution 3:&quot;&gt;&lt;/a&gt;Code in C++ for Solution 3:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        int missingNumber(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
            int res = 0;
            for (int i = 0; i &amp;lt; nums.size(); ++i) {
                res ^= (i + 1) ^ nums[i];
        }
            return res;
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Math" scheme="http://yoursite.com/tags/Math/"/>
    
      <category term="Bit Manipulation" scheme="http://yoursite.com/tags/Bit-Manipulation/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录72-Populating Next Right Pointers in Each Node</title>
    <link href="http://yoursite.com/2015/10/24/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9572-Populating-Next-Right-Pointers-in-Each-Node/"/>
    <id>http://yoursite.com/2015/10/24/Leetcode刷题记录72-Populating-Next-Right-Pointers-in-Each-Node/</id>
    <published>2015-10-24T15:55:46.000Z</published>
    <updated>2015-10-25T03:59:25.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a binary tree&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct TreeLinkNode {
  TreeLinkNode *left;
  TreeLinkNode *right;
  TreeLinkNode *next;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to NULL.&lt;/p&gt;
&lt;p&gt;Initially, all next pointers are set to NULL.&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;You may only use constant extra space.&lt;br&gt;You may assume that it is a perfect binary tree (ie, all leaves are at the same level, and every parent has two children).&lt;br&gt;For example,&lt;br&gt;Given the following perfect binary tree,&lt;br&gt;         1&lt;br&gt;       /  \&lt;br&gt;      2    3&lt;br&gt;     / \  / \&lt;br&gt;    4  5  6  7&lt;br&gt;After calling your function, the tree should look like:&lt;br&gt;         1 -&amp;gt; NULL&lt;br&gt;       /  \&lt;br&gt;      2 -&amp;gt; 3 -&amp;gt; NULL&lt;br&gt;     / \  / \&lt;br&gt;    4-&amp;gt;5-&amp;gt;6-&amp;gt;7 -&amp;gt; NULL&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot; Solutions:&quot;&gt;&lt;/a&gt; Solutions:&lt;/h2&gt;&lt;p&gt; It’s very like &lt;a href=&quot;/2015/10/15/Leetcode刷题记录64-Binary-Tree-Level-Order-Traversal/&quot;&gt;This Problem&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot; Code in C++:&quot;&gt;&lt;/a&gt; Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt; /**
 * Definition for binary tree with next pointer.
 * struct TreeLinkNode {
 *  int val;
 *  TreeLinkNode *left, *right, *next;
 *  TreeLinkNode(int x) : val(x), left(NULL), right(NULL), next(NULL) {}
 * };
 */
class Solution {
    public:
        void connect(TreeLinkNode *root) {
            queue&amp;lt;TreeLinkNode*&amp;gt; a;
            if(root)
                {
                    TreeLinkNode* pre=NULL;
                    a.push(root);
                    a.push(NULL);
                    while(!a.empty())
                        {
                            TreeLinkNode* t=a.front();
                            a.pop();
                            if(t)
                                {
                                    if(t-&amp;gt;left)
                                        a.push(t-&amp;gt;left);
                                    if(t-&amp;gt;right)
                                        a.push(t-&amp;gt;right);
                                    if(pre) 
                                        pre-&amp;gt;next = t;
                                    pre=t;                                 
                                }
                            else{
                                    if(!a.empty())
                                        {
                                            a.push(NULL);
                                            if(pre) 
                                                pre-&amp;gt;next=NULL;
                                            pre=NULL;
                                        }
                                }

                        }
                }

        }
    };
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Depth First Search" scheme="http://yoursite.com/tags/Depth-First-Search/"/>
    
      <category term="Binary Tree" scheme="http://yoursite.com/tags/Binary-Tree/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录71-Linked List Cycle</title>
    <link href="http://yoursite.com/2015/10/24/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9571-Linked-List-Cycle/"/>
    <id>http://yoursite.com/2015/10/24/Leetcode刷题记录71-Linked-List-Cycle/</id>
    <published>2015-10-24T15:12:51.000Z</published>
    <updated>2015-10-25T03:34:13.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a linked list, determine if it has a cycle in it.&lt;/p&gt;
&lt;p&gt;Follow up:&lt;br&gt;Can you solve it without using extra space?&lt;/p&gt;
&lt;h2 id=&quot;Solution-1&quot;&gt;&lt;a href=&quot;#Solution-1&quot; class=&quot;headerlink&quot; title=&quot;Solution 1:&quot;&gt;&lt;/a&gt;Solution 1:&lt;/h2&gt;&lt;p&gt;If we can have extra space&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C-for-Solution-1&quot;&gt;&lt;a href=&quot;#Code-in-C-for-Solution-1&quot; class=&quot;headerlink&quot; title=&quot;Code in C++ for Solution 1:&quot;&gt;&lt;/a&gt;Code in C++ for Solution 1:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
    public:
        bool hasCycle(ListNode *head) {
            set&amp;lt;ListNode*&amp;gt; s;
            ListNode*a = head;
            while(a)
                {
                    if(s.find(a)!=s.end()) 
                        return true;
                    else 
                        {
                               s.insert(a);
                               a=a-&amp;gt;next;
                        }

                }
            return false;

        }        
    };
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;Solution-2&quot;&gt;&lt;a href=&quot;#Solution-2&quot; class=&quot;headerlink&quot; title=&quot;Solution 2:&quot;&gt;&lt;/a&gt;Solution 2:&lt;/h2&gt;&lt;p&gt;If we don’t have extra space. We can have two pointers, once there being a cycle, they will meet.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C-for-Solution-2&quot;&gt;&lt;a href=&quot;#Code-in-C-for-Solution-2&quot; class=&quot;headerlink&quot; title=&quot;Code in C++ for Solution 2:&quot;&gt;&lt;/a&gt;Code in C++ for Solution 2:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
    public:
        bool hasCycle(ListNode *head) {
            if(!head) 
                return false;
            ListNode *a = head;
            ListNode *b = NULL;
            if(a-&amp;gt;next)
                b=a-&amp;gt;next;
            while(a&amp;amp;&amp;amp;b)
                {
                       if(a==b) 
                           return true;
                       else
                           {
                               if(b-&amp;gt;next) 
                                   b=b-&amp;gt;next-&amp;gt;next;
                               else 
                                   return false;
                               a=a-&amp;gt;next;
                           }

                }
            return false;

        }
    };
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Two Pointers" scheme="http://yoursite.com/tags/Two-Pointers/"/>
    
      <category term="Linked List" scheme="http://yoursite.com/tags/Linked-List/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录70-Binary Search Tree InOrder Traversal</title>
    <link href="http://yoursite.com/2015/10/24/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9570-Binary-Search-Tree-InOrder-Traversal/"/>
    <id>http://yoursite.com/2015/10/24/Leetcode刷题记录70-Binary-Search-Tree-InOrder-Traversal/</id>
    <published>2015-10-24T15:01:24.000Z</published>
    <updated>2015-10-25T03:04:20.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a binary tree, return the inorder traversal of its nodes’ values.&lt;/p&gt;
&lt;p&gt;For example:&lt;br&gt;Given binary tree {1,#,2,3},&lt;br&gt;   1&lt;br&gt;    \&lt;br&gt;     2&lt;br&gt;    /&lt;br&gt;   3&lt;br&gt;return [1,3,2].&lt;/p&gt;
&lt;p&gt;Note: Recursive solution is trivial, could you do it iteratively?&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;It’s like &lt;a href=&quot;/2015/10/24/Leetcode刷题记录69-Binary-Search-Tree-PreOrder-Traversal/&quot;&gt;This Problem&lt;/a&gt; &lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    public:
        vector&amp;lt;int&amp;gt; inorderTraversal(TreeNode* root) {
                vector&amp;lt;int&amp;gt; res;
            stack&amp;lt;TreeNode*&amp;gt; s;
            TreeNode*p = root;
            while(p||!s.empty())
                {
                    while(p)
                        {
                            s.push(p);
                            p=p-&amp;gt;left;
                        }
                    if(!s.empty())
                        {
                               res.push_back(s.top()-&amp;gt;val);
                               p=s.top()-&amp;gt;right;
                               s.pop();
                        }
                }
            return res;

        }
    };
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录69-Binary Tree Preorder Traversal</title>
    <link href="http://yoursite.com/2015/10/24/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9569-Binary-Search-Tree-PreOrder-Traversal/"/>
    <id>http://yoursite.com/2015/10/24/Leetcode刷题记录69-Binary-Search-Tree-PreOrder-Traversal/</id>
    <published>2015-10-24T14:25:30.000Z</published>
    <updated>2015-10-25T02:46:26.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given a binary tree, return the preorder traversal of its nodes’ values.&lt;/p&gt;
&lt;p&gt;For example:&lt;br&gt;Given binary tree {1,#,2,3},&lt;br&gt;   1&lt;br&gt;    \&lt;br&gt;     2&lt;br&gt;    /&lt;br&gt;   3&lt;br&gt;return [1,2,3].&lt;/p&gt;
&lt;p&gt;Note: Recursive solution is trivial, could you do it iteratively?&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;Use a stack to store the pre nodes.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
    public:
        vector&amp;lt;int&amp;gt; preorderTraversal(TreeNode* root) {
            vector&amp;lt;int&amp;gt; res;
            TreeNode* p = root;
            stack&amp;lt;TreeNode*&amp;gt; s;
            while(!s.empty()||p)
                {
                    while(p)
                        {
                            s.push(p);
                            res.push_back(p-&amp;gt;val);
                            p=p-&amp;gt;left;
                        }
                    if(!s.empty())
                        {
                            p=s.top()-&amp;gt;right;
                            s.pop();
                        }
                }
            return res;

            }
    };
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Tree" scheme="http://yoursite.com/tags/Tree/"/>
    
      <category term="Stack" scheme="http://yoursite.com/tags/Stack/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2015/10/20/Hello-World/"/>
    <id>http://yoursite.com/2015/10/20/Hello-World/</id>
    <published>2015-10-20T13:04:33.000Z</published>
    <updated>2015-10-21T14:54:12.000Z</updated>
    
    <content type="html">&lt;p&gt;由于上一次惨痛的经历。。。重装系统忘记备份博客源码。我决定使用Time Machine。。。没啥好说的，心情十分复杂，就这样。。。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;由于上一次惨痛的经历。。。重装系统忘记备份博客源码。我决定使用Time Machine。。。没啥好说的，心情十分复杂，就这样。。。&lt;/p&gt;

    
    </summary>
    
      <category term="Milestone" scheme="http://yoursite.com/categories/Milestone/"/>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录68-Product Of Array Except Self</title>
    <link href="http://yoursite.com/2015/10/15/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9568-Product-Of-Array-Except-Self/"/>
    <id>http://yoursite.com/2015/10/15/Leetcode刷题记录68-Product-Of-Array-Except-Self/</id>
    <published>2015-10-14T17:51:41.000Z</published>
    <updated>2015-10-21T05:52:55.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given an array of n integers where n &amp;gt; 1, nums, return an array output such that output[i] is equal to the product of all the elements of nums except nums[i].&lt;/p&gt;
&lt;p&gt;Solve it without division and in O(n).&lt;/p&gt;
&lt;p&gt;For example, given [1,2,3,4], return [24,12,8,6].&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;To record everything’s product from left and from right and make a product.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        vector&amp;lt;int&amp;gt; productExceptSelf(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
               vector&amp;lt;int&amp;gt; left(nums.size(),1);
               for(int i=1;i&amp;lt;left.size();i++)
                   left[i]= left[i-1]*nums[i-1];
               vector&amp;lt;int&amp;gt; right(nums.size(),1);
               for(int i=right.size()-2;i&amp;gt;=0;i--)
                   right[i]=right[i+1]*nums[i+1];
               vector&amp;lt;int&amp;gt; res(nums.size(),1);
               for(int i=0;i&amp;lt;res.size();i++)
                   res[i]=left[i]*right[i];
               return res;
    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Dynamic Programming" scheme="http://yoursite.com/tags/Dynamic-Programming/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode刷题记录67-Single Number III</title>
    <link href="http://yoursite.com/2015/10/15/Leetcode%E5%88%B7%E9%A2%98%E8%AE%B0%E5%BD%9567-Single-Number-III/"/>
    <id>http://yoursite.com/2015/10/15/Leetcode刷题记录67-Single-Number-III/</id>
    <published>2015-10-14T17:50:05.000Z</published>
    <updated>2015-10-21T05:51:17.000Z</updated>
    
    <content type="html">&lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;Given an array of numbers nums, in which exactly two elements appear only once and all the other elements appear exactly twice. Find the two elements that appear only once.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;p&gt;Given nums = [1, 2, 1, 3, 2, 5], return [3, 5].&lt;/p&gt;
&lt;p&gt;Note:&lt;br&gt;The order of the result is not important. So in the above example, [5, 3] is also correct.&lt;br&gt;Your algorithm should run in linear runtime complexity. Could you implement it using only constant space complexity?&lt;/p&gt;
&lt;h2 id=&quot;Solutions&quot;&gt;&lt;a href=&quot;#Solutions&quot; class=&quot;headerlink&quot; title=&quot;Solutions:&quot;&gt;&lt;/a&gt;Solutions:&lt;/h2&gt;&lt;p&gt;Using a set to store unique items.&lt;/p&gt;
&lt;h2 id=&quot;Code-in-C&quot;&gt;&lt;a href=&quot;#Code-in-C&quot; class=&quot;headerlink&quot; title=&quot;Code in C++:&quot;&gt;&lt;/a&gt;Code in C++:&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;class Solution {
    public:
        vector&amp;lt;int&amp;gt; singleNumber(vector&amp;lt;int&amp;gt;&amp;amp; nums) {
            set&amp;lt;int&amp;gt; s;
            s.clear();
            for(int i=0;i&amp;lt;nums.size();i++)
                {
                    if(s.find(nums[i])!=s.end())
                        s.erase(nums[i]);
                    else 
                        s.insert(nums[i]);
                }
            vector&amp;lt;int&amp;gt; res;
            res.push_back(*s.begin());
            s.erase(*s.begin());
            res.push_back(*s.begin());
            return res;

    }
};
&lt;/code&gt;&lt;/pre&gt;</content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Problem-Description&quot;&gt;&lt;a href=&quot;#Problem-Description&quot; class=&quot;headerlink&quot; title=&quot;Problem Description:&quot;&gt;&lt;/a&gt;Problem Description:&lt;/h2&gt;&lt;p&gt;
    
    </summary>
    
      <category term="Leetcode" scheme="http://yoursite.com/categories/Leetcode/"/>
    
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Hashtable" scheme="http://yoursite.com/tags/Hashtable/"/>
    
  </entry>
  
</feed>
